# -*- coding: utf-8 -*-











'''
This script will generate plots answering each of the research questions posed 
in analyze.py.  In total, eight plots will be generated by this script.
'''










### load the necessary packages
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt










### LOAD IN THE DATA FROM ANALYZE.PY TO GENERATE THE PLOTS





# read in the data of all records as record_df
record_df = pd.read_csv('all_records.csv')

# read in the data of record counts as record_count_df
record_count_df = pd.read_csv('record_counts.csv')

# read in the data of record counts per decade as record_decade_count_df
record_decade_count_df = pd.read_csv('decade_record_counts.csv')

# read in the data of average years records have lasted as avg_yr_records_df
avg_yr_records_df = pd.read_csv('avg_years_record.csv')

# read in the data of median years records have lasted as med_yr_records_df
med_yr_records_df = pd.read_csv('med_years_record.csv')










### MAKE A BAR PLOT OF THE TEN NATIONS WITH THE MOST TRACK AND FIELD RECORDS OVERALL





# grab the top ten nations' record counts as a pd.Series
top_ten_series = record_count_df.groupby(by = 'Nationality')['Record_Count'].sum().sort_values(ascending = False)[:10]

# grab the top ten nation name abbreviations as a list
top_ten_nations = list(top_ten_series.index)

# grab the record counts for the above nations as a list
top_ten_record_count = list(top_ten_series)



# set the theme
sns.set_style('darkgrid')

# set up the figure
plt.figure(figsize = (7,5))

# generate the barplot
top_10_barplot = sns.barplot(x = top_ten_nations,
                             y = top_ten_record_count,
                             color = 'blue')

# make the labels
plt.xlabel('Nation', fontsize = 14)
plt.ylabel('Record Count', fontsize = 14)
plt.title('Top Ten Track and Field Nations', fontsize = 20)

# add individual bar labels
top_10_barplot.bar_label(top_10_barplot.containers[0])

# grab the figure
top_10_barplot_fig = top_10_barplot.get_figure()

# save the figure
top_10_barplot_fig.savefig('top_10_barplot.png', dpi = 300, bbox_inches = "tight")










### MAKE A FACETED BAR PLOT WITH THE NATIONS HAVING THE MOST RECORDS IN EACH EVENT CATEGORY





# make a dict that assigns a color to each event category
color_dict = {'Hurdles': '#87ceeb',
              'Relay': '#6495ed',
              'Walking': '#4169e1',
              'Long Distance': '#1e90ff',
              'Middle Distance': '#00bfff',
              'Sprint': '#4682b4',
              'Jumping': '#5d8aa8',
              'Throwing': '#b0c4de',
              'Multisport Events': '#93CAED'}



# define a function to return the top 5 nations with the most records and the record
# counts in a particular category
def top_5(category_str, record_count_df = record_count_df, color_dict = color_dict):
    
    # copy the df to avoid error messages
    record_count_df = record_count_df.copy()
    
    # subset the df to include only rows in the specified category
    cat_df = record_count_df[record_count_df['Category'] == category_str]
    
    # group the record count by nationality
    group_by = cat_df.groupby(by = 'Nationality')['Record_Count'].sum()
    
    # grab the top 5 nations in a list
    top_5_nations = list(group_by.sort_values(ascending = False)[0:5].index)
    
    # grab the top 5 record counts in a list
    top_5_record_counts = list(group_by.sort_values(ascending = False)[0:5])
    
    # return the top_5_nations and top_5_record_counts in a tuple
    return (top_5_nations, top_5_record_counts, color_dict[category_str])



# initialize an empty dictionary
top_5_cat_dict = {}

#  a list of the unique categories
unique_categories = ['Hurdles',
                     'Relay',
                     'Walking',
                     'Long Distance',
                     'Middle Distance',
                     'Sprint',
                     'Jumping',
                     'Throwing',
                     'Multisport Events']

# fill the dict above with the top 5 nations and record counts in each category
for cat in unique_categories:
    
    top_5_cat_dict[cat] = top_5(cat)
    
    
    
# set the theme
sns.set_style('darkgrid')

# set up the figure
fig, axes = plt.subplots(3, 3, figsize = (14,16))

# initialize the ax index
ax_ind = 0

# generate the appropriate plot on each subplot
for cat in top_5_cat_dict.keys():
    
    # generate the barplot
    sns.barplot(x = top_5_cat_dict[cat][0],
                y = top_5_cat_dict[cat][1],
                color = top_5_cat_dict[cat][2],
                ax = axes.flat[ax_ind])
    
    # generate the appropriate labels
    axes.flat[ax_ind].set_xlabel('Nation', fontsize = 12)
    axes.flat[ax_ind].set_ylabel('Record Count', fontsize = 12)
    axes.flat[ax_ind].set_title(cat, fontsize = 15)
    
    # add individual bar labels
    axes.flat[ax_ind].bar_label(axes.flat[ax_ind].containers[0])
    
    # increment the ax index
    ax_ind += 1
    
# add a title for the whole figure
fig.suptitle('Leading Nations in Each Category', fontsize = 25)

# save the figure
fig.savefig('top_5_by_category.png', dpi = 300, bbox_inches = "tight")










### MAKE A PIE CHART DISPLAYING THE PROPORTION OF RECORDS FROM EACH DECADE





# grab the count of records grouped by decade
decade_groupby = record_decade_count_df.groupby(by = 'Decade')['Record_Count'].sum()

# grab the decades from the index of the above
decade_list = list(decade_groupby.index)

# grab the counts from the above
counts_list = list(decade_groupby)

# grab the percentage of the whole for each decade
percentage_list = list(decade_groupby / decade_groupby.sum())

# make all these into a data frame
decade_percentage_df = pd.DataFrame({'Decade': decade_list,
                                     'Record_Count': counts_list,
                                     'Percentage': percentage_list})



# set the theme
sns.set_style('dark')

# set up the figure
pie_fig, pie_ax = plt.subplots(1, 1, figsize = (12,12))

# set the text color to black
plt.rcParams['text.color'] = 'black'

# generate the pie chart
pie_chart = plt.pie(decade_percentage_df['Percentage'],
                    labels = decade_percentage_df['Decade'],
                    # colors are distinguishable shades of blue
                    colors = ['#87ceeb',
                              '#6495ed',
                              '#4169e1',
                              '#1e90ff',
                              '#00bfff',
                              '#4682b4',
                              '#5d8aa8',
                              '#b0c4de',
                              '#93CAED'],
                    labeldistance = 1.1,
                    startangle = 0,
                    autopct='%1.1f%%')

# make the title
plt.title('Percentage of Records from Each Decade', fontsize = 40)

# separate the percentage labels
plt.tight_layout()

# save the figure
pie_fig.savefig('decade_pie_chart.png', dpi = 300, bbox_inches = "tight")










### GENERATE A HISTOGRAM OF THE NUMBER OF YEARS RECORDS HAVE LASTED





# grab the Years_Lasted column from the record_df
years_lasted = list(record_df['Years_Lasted'])

# set up the figure
hist_fig, hist_ax = plt.subplots(1, 1, figsize = (6,3))

# generate the histogram
sns.histplot(years_lasted, bins = list(range(0, 131, 10)), color = 'red')

# make the labels
plt.xlabel('Years Lasted Bin', fontsize = 10)
plt.ylabel('Record Count', fontsize = 10)
plt.title('Histogram of Record Duration in Years', fontsize = 16)

# save the figure
hist_fig.savefig('years_lasted_histogram.png', dpi = 300, bbox_inches = "tight")










### MAKE A BAR CHART CONTAINING THE TEN RECORDS THAT HAVE LASTED THE LONGEST





# grab the 10 longest lasting records
longest_ten = record_df.sort_values(by = 'Years_Lasted', ascending = False)[0:10]

# grab the events
long_10_events = list(longest_ten['Event'])

# grab the years they have lasted
long_10_years = list(longest_ten['Years_Lasted'])



# set the theme
sns.set_style('darkgrid')

# set up the figure
plt.figure(figsize = (12,6))

# generate the barplot
long_10_barplot = sns.barplot(x = long_10_events,
                             y = long_10_years,
                             color = 'blue')

# make the labels
plt.xlabel('Event', fontsize = 15)
plt.ylabel('Years Lasted', fontsize = 15)
plt.title('Ten Longest Lasting Records', fontsize = 20)

# add individual bar labels
long_10_barplot.bar_label(long_10_barplot.containers[0])

# grab the figure
long_10_barplot_fig = long_10_barplot.get_figure()

# rotate the x axis labels
long_10_barplot.set_xticklabels(long_10_barplot.get_xticklabels(), rotation=45)

# save the figure
long_10_barplot_fig.savefig('longest_10_events_barplot.png', dpi = 300, bbox_inches = "tight")










### MAKE A FACETED BAR CHART CONTAINING THE AVG AND MEDIAN TIMES THAT RECORDS
### HAVE LASTED WHEN GROUPED BY EVENT CATEGORY





# grab the average years lasted groupby
avg_years_lasted_groupby = avg_yr_records_df.groupby(by = 'Category')['Average_Years_Lasted'].mean().sort_values(ascending = False)

# grab the average years lasted
avg_years = list(avg_years_lasted_groupby)

# grab the corresponding categories
avg_categories = list(avg_years_lasted_groupby.index)



# grab the median years lasted, sorted in decreasing order
med_years = list(med_yr_records_df.sort_values(by = 'Median_Years_Lasted', ascending = False)['Median_Years_Lasted'])

# grab the corresponding categories
med_categories = list(med_yr_records_df.sort_values(by = 'Median_Years_Lasted', ascending = False)['Category'])



# set the theme
sns.set_style('darkgrid')

# set up the figure
fig, axes = plt.subplots(1, 2, sharey = True, figsize = (18,9))

# generate the first barplot
for category, years in zip(avg_categories, avg_years):
    axes[0].bar(category, years, color = color_dict.get(category))

# generate the appropriate labels
axes.flat[0].set_xlabel('Category', fontsize = 18)
axes.flat[0].set_ylabel('Average Years Lasted', fontsize = 18)
axes.flat[0].set_title('Average Years Records Have Lasted by Category', fontsize = 20)

# get rid of the x ticks
axes.flat[0].set_xticks([])

# add the legend
axes.flat[0].legend(avg_categories)
    
# generate the second barplot
for category, years in zip(med_categories, med_years):
    axes[1].bar(category, years, color=color_dict.get(category))

# generate the appropriate labels
axes.flat[1].set_xlabel('Category', fontsize = 18)
axes.flat[1].set_ylabel('Median Years Lasted', fontsize = 18)
axes.flat[1].set_title('Median Years Records Have Lasted by Category', fontsize = 20)

# get rid of the x ticks
axes.flat[1].set_xticks([])

# add the legend
axes.flat[1].legend(med_categories)
    
# add a title for the whole figure
fig.suptitle('Average and Median Years Lasted', fontsize = 35)

# save the figure
fig.savefig('avg_and_med_years_lasted.png', dpi = 300, bbox_inches = "tight")










### MAKE A FACETED BAR CHART OF THE TEN NATIONS WITH THE MOST RECORDS OVERALL
### WHEN SPLIT BY MALE AND FEMALE EVENTS





# subset record_count_df by males
record_count_male_df = record_count_df[record_count_df['Gender'] == 'Male']

# subset record_count_df by females
record_count_female_df = record_count_df[record_count_df['Gender'] == 'Female']



# grab the top ten nations for male events in terms of record count
male_record_groupby = record_count_male_df.groupby(by = 'Nationality')['Record_Count'].sum().sort_values(ascending = False)[:10]

# grab the nations
male_record_nations = list(male_record_groupby.index)

# grab the corresponding record counts
male_record_nation_counts = list(male_record_groupby)



# grab the top ten nations for female events in terms of record count
female_record_groupby = record_count_female_df.groupby(by = 'Nationality')['Record_Count'].sum().sort_values(ascending = False)[:10]

# grab the nations
female_record_nations = list(female_record_groupby.index)

# grab the corresponding record counts
female_record_nation_counts = list(female_record_groupby)



# set the theme
sns.set_style('darkgrid')

# set up the figure
fig, axes = plt.subplots(1, 2, sharey = True, figsize = (15,6))

# generate the first barplot
sns.barplot(x = male_record_nations,
            y = male_record_nation_counts,
            color = 'blue',
            ax = axes.flat[0])

# generate the appropriate labels
axes.flat[0].set_xlabel('Nation', fontsize = 12)
axes.flat[0].set_ylabel('Record Count', fontsize = 12)
axes.flat[0].set_title('Top 10 Nations for Male Events', fontsize = 15)

# add individual bar labels
axes.flat[0].bar_label(axes.flat[0].containers[0])

# generate the second barplot
sns.barplot(x = female_record_nations,
            y = female_record_nation_counts,
            color = 'red',
            ax = axes.flat[1])

# generate the appropriate labels
axes.flat[1].set_xlabel('Nation', fontsize = 12)
axes.flat[1].set_ylabel('Record Count', fontsize = 12)
axes.flat[1].set_title('Top 10 Nations for Female Events', fontsize = 15)

# add individual bar labels
axes.flat[1].bar_label(axes.flat[1].containers[0])
    
# add a title for the whole figure
fig.suptitle('National Record Counts Males and Females', fontsize = 20)

# save the figure
fig.savefig('male_female_record_counts.png', dpi = 300, bbox_inches = "tight")










### MAKE A FACETED BAR CHART CONTAINING THE AVERAGE TIME THAT RECORDS HAVE LASTED
### WHEN GROUPED BY EVENT CATEGORY, SPLIT BY MALE AND FEMALE





# subset the avg_yr_records_df by female events
female_avgs = avg_yr_records_df[avg_yr_records_df['Gender'] == 'Female']

# subset the avg_yr_records_df by male events
male_avgs = avg_yr_records_df[avg_yr_records_df['Gender'] == 'Male']



# grab the gategories for the female averages
female_categories = list(female_avgs.sort_values(by = 'Average_Years_Lasted', ascending = False)['Category'])

# grab the corresponing average years lasted
female_avg_years = list(female_avgs.sort_values(by = 'Average_Years_Lasted', ascending = False)['Average_Years_Lasted'])



# grab the gategories for the male averages
male_categories = list(male_avgs.sort_values(by = 'Average_Years_Lasted', ascending = False)['Category'])

# grab the corresponing average years lasted
male_avg_years = list(male_avgs.sort_values(by = 'Average_Years_Lasted', ascending = False)['Average_Years_Lasted'])



# set the theme
sns.set_style('darkgrid')

# set up the figure
fig, axes = plt.subplots(1, 2, sharey = True, figsize = (18,9))

# generate the first barplot
for category, years in zip(male_categories, male_avg_years):
    axes[0].bar(category, years, color = color_dict.get(category))

# generate the appropriate labels
axes.flat[0].set_xlabel('Category', fontsize = 15)
axes.flat[0].set_ylabel('Average Years Lasted', fontsize = 15)
axes.flat[0].set_title('Average Record Duration for Male Events', fontsize = 20)

# get rid of the x ticks
axes.flat[0].set_xticks([])

# add the legend
axes.flat[0].legend(male_categories)

# generate the second barplot
for category, years in zip(female_categories, female_avg_years):
    axes[1].bar(category, years, color = color_dict.get(category))

# generate the appropriate labels
axes.flat[1].set_xlabel('Category', fontsize = 15)
axes.flat[1].set_ylabel('Average Years Lasted', fontsize = 15)
axes.flat[1].set_title('Average Record Duration for Female Events', fontsize = 20)

# get rid of the x ticks
axes.flat[1].set_xticks([])

# add the legend
axes.flat[1].legend(female_categories)
    
# add a title for the whole figure
fig.suptitle('Male vs Female Average Years Lasted', fontsize = 35)

# save the figure
fig.savefig('male_vs_female_avg_years_lasted.png', dpi = 300, bbox_inches = "tight")
